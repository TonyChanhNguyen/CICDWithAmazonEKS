[
{
	"uri": "/vi/3-eksdbwithebs/3.1-installcsidriver/",
	"title": "Cài đặt Amazon EBS CSI Driver",
	"tags": [],
	"description": "",
	"content": "Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver quản lý vòng đời của các ổ đĩa Amazon EBS dưới dạng bộ lưu trữ cho các ổ đĩa Kubernetes mà bạn tạo. Amazon EBS CSI driver tạo các ổ đĩa Amazon EBS cho các loại ổ đĩa Kubernetes sau: ổ đĩa tạm thời và ổ đĩa cố định.\nTạo IAM Policy Amazon EBS CSI plugin yêu cầu quyền IAM để gọi đến AWS APIs.\n  Đi đến IAM.\n  Chọn mục Policies.\n  Chọn Create policy.   Tại mục Policy editor, chọn JSON.\n  Sau đó, dán đoạn JSON dưới đây.\n  {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: [\r\u0026#34;ec2:AttachVolume\u0026#34;,\r\u0026#34;ec2:CreateSnapshot\u0026#34;,\r\u0026#34;ec2:CreateTags\u0026#34;,\r\u0026#34;ec2:CreateVolume\u0026#34;,\r\u0026#34;ec2:DeleteSnapshot\u0026#34;,\r\u0026#34;ec2:DeleteTags\u0026#34;,\r\u0026#34;ec2:DeleteVolume\u0026#34;,\r\u0026#34;ec2:DescribeInstances\u0026#34;,\r\u0026#34;ec2:DescribeSnapshots\u0026#34;,\r\u0026#34;ec2:DescribeTags\u0026#34;,\r\u0026#34;ec2:DescribeVolumes\u0026#34;,\r\u0026#34;ec2:DetachVolume\u0026#34;\r],\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\r}\r]\r}  Sau đó, nhấn Next.   Nhập Amazon_EBS_CSI_Driver là Policy name.\n  Nhập Policy for EC2 Instances to access Elastic Block Store là Description - optional.\n  Nhấn Create policy.   Liệt kê IAM role Worker Nodes đang sử dụng  Tại cửa sổ lệnh Cloud9, sử dụng câu lệnh bên dưới để tìm tên của IAM role mà Worker Nodes đang sử dụng.  kubectl -n kube-system describe configmap aws-auth Kiếm tra giá trị của rolearn để tìm kiếm tên của IAM Role. Ví dụ: Trong trường hợp này, tên IAM Role là eksctl-fcj-storage-cluster-nodegro-NodeInstanceRole-dN18fcwv9euu.\nLiên kết policy vào IAM Role   Đi đến IAM Role.\n  Tại tính năng Search, nhập tên IAM Role vừa tìm thấy.\n  Nhấn vào nó.   Nhấn Attach policies của tính năng Add permissions.   Tìm kiếm policy tên Amazon_EBS_CSI_Driver.\n  Chọn kết quả tìm được.\n  Nhấn Add permissions.   Triển khai Amazon EBS CSI Driver  Tại cửa sổ lệnh Cloud9, thực thi câu lệnh bên dưới.  kubectl apply -k \u0026#34;github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master\u0026#34; Kiểm tra kết quả. Đảm bảo có pod tên ebs-csi đang chạy ở namespace kube-system.  kubectl get pods -n kube-system Bạn đã cài đặt Amazon EBS CSI Driver thành công, chuyển đến bước tiếp theo để tìm hiểu làm thế nào để sử dụng Amazon EBS CSI Driver để triển khai bộ lưu trữ EBS cho Amazon EKS Cluster. "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Amazon Elastic Kubernetes Service (Amazon EKS) là một dịch vụ được quản lý giúp làm giảm sự cần thiết của việc cài đặt, vận hành và duy trì Kubernetes Control Plane của bạn trên Amazon Web Services (AWS). Kubernetes là một hệ thống mã nguồn mở mà tự động hóa việc quản lý, co giãn, và triển khai các ứng dụng đã được đóng gói theo tiêu chuẩn container.\nAmazon RDS là một dịch vụ CSDL quan hệ dễ dàng quản lý được tối ưu hóa cho tổng chi phí sở hữu. Nó dễ dàng cài đặt, vận hành, và co giãn theo yêu cầu. Amazon RDS tự động hóa các tác vụ quản lý không phân biệt như là cung cấp, cấu hình, sao lưu và bản vá. Amazon RDS cho phép khách hàng tạo một CDSL mới hoàn toàn trong vòng vài phút, và cung cấp tính linh hoạt cho việc tùy chỉnh CSDL để đáp các yêu cầu của họ trên 8 công cụ và 2 tùy chọn triển khai.\nAmazon Elastic Block Store (Amazon EBS) cung cấp tài nguyên bộ lưu trữ dạng khối có khả năng co giãn và hiệu năng cao mà được sử dụng cho các máy chủ Amazon Elastic Compute Cloud (Amazon EC2)\n"
},
{
	"uri": "/vi/",
	"title": "Triển khai CSDL trên Amazon EKS",
	"tags": [],
	"description": "",
	"content": "Triển khai CSDL trên Amazon EKS Tổng quan This workshop will provide a high level overview on how to integrate MySQL Database for application that run on Amazon EKS Cluster via Amazon Elastic Block Storage (EBS) and Amazon RDS services. Bài thực hành này sẽ cung cấp một cái nhìn tổng quan về việc làm thế nào để tích hợp CSDL MySQL cho ứng dụng chạy trên Amazon EKS Cluster thông qua dịch vụ Amazon Elastic Block Storage (EBS) và Amazon RDS Nội dung  Giới thiệu Các bước chuẩn bị Triển khai CSDL trên Amazon EKS thông qua EBS Volume Triển khai CSDL trên Amazon EKS thông qua Amazon RDS Dọn dẹp tài nguyên  "
},
{
	"uri": "/vi/2-prerequiste/2.1-createcloud9workspace/",
	"title": "Tạo môi trường làm việc Cloud9",
	"tags": [],
	"description": "",
	"content": "Tạo môi trường làm việc Cloud9   Đi đến Cloud9 tại vùng ap-southeast-1.\n  Nhấn Create environment.   Tại trang Create environment, nhập FCJ-Workspace tại Name.\n  Nhập Workspace for hands on workshop tại Description.\n  Ở mục Environment type, giữ mặc định New EC2 instance.\n  Ở mục Instance type, chọn Additional instance types.\n  Ở mục Additional instance types, chọn t3.large.   Cuộn xuống cuối trang và nhấn Create.   Máy chủ làm việc đang được tạo.   Mất khoảng 2 phút để máy chủ tạo thành công.\n  Sau khi máy chủ tạo thành công, nhấn Open để bắt đầu.   "
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Tổng quan Để tiến hành bài lab này, chúng ta phải chuẩn bị một máy chủ làm việc Cloud9 và tạo IAM Role cho máy chủ đó.\nNội dung  2.1 Tạo môi trường Cloud9 2.2 Cấu hình IAM Role 2.3 Cài đặt công cụ 2.4 Tạo Amazon EKS Cluster 2.5 Tạo ứng dụng  "
},
{
	"uri": "/vi/2-prerequiste/2.2-modifyiamrole/",
	"title": "Cấu hình IAM role",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một IAM Role và gán nó cho máy chủ làm việc.\nTạo IAM role   Nhấn IAM để chuyển hướpg đến dịch vụ IAM.\n  Nhấn Role.\n  Nhấn Create role.   Ở mục Trusted entity type, chọn AWS service.\n  Ở mục Service or use case, chọn EC2.   Sau đó, nhấn Next.   Ở mục Permissions policies, chọn policy tên AdministratorAccess.   Sau đó, nhấn Next.   Tại trang Name, review, and create, nhập eksworkspace-administrator ở mục Role name .   Sau đó, cuộn xuống cuối trang và nhấn Create role.   Gán role cho máy chủ làm việc   Tại trang AWS Cloud9, nhấn Manage EC2 instance.   Bạn sẽ thấy máy chủ làm việc đã được tạo. Sau đó, nhấn chọn nó.\n  Nhấn Action.\n  Nhấn Security.\n  Nhấn Modify IAM role.   Chọn Role eksworkspace-administrator vừa được tạo ở bước trên.\n  Sau đó, nhấn Update IAM role.   IAM Role mới đã được cập nhật thành công.   Cập nhật cấu hình Cloud9 Cloud9 sẽ quản lý thông tin xác thực IAM tự dộng. Cấu hình mặc định này hiện không phù hợp với xác thực EKS thông qua IAM, chúng ta sẽ cần phải vô hiệu hóa tính năng này và sử dụng IAM Role.\n\r  Tại trang AWS Cloud9, nhấn AWS Cloud9.\n  Chọn Preferences.   Tại mục AWS Settings, vô hiệu hóa AWS managed temporary credentials.   Để đảm bảo rằng các thông tin xác thực tạm thời không còn lưu trữ trong Cloud9, chúng ta sẽ xóa tất cả thông tin xác thực đang tồn tại với dòng lệnh bên dưới.\n  rm -vf ${HOME}/.aws/credentials "
},
{
	"uri": "/vi/3-eksdbwithebs/3.2-deploymysqlonebs/",
	"title": "Triển khai CSDL MySQL trên EBS Volume",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ sử dụng bộ lưu trữ cho EKS Cluster bằng việc tạo EBS Volume. Sau đó tạo một CSDL MySQL trên bộ lưu trữ này để kết nối tới ứng dụng.\nCung cấp động EBS Volume.  Tạo một thư mục để lưu trữ tất cả các tệp manifest trong fcj-user-management.  cd ..\rmkdir kube-manifest\rcd kube-manifest Tạo một tệp tên 01-storage-class.yaml.  touch 01-storage-class.yaml Mở tệp 01-storage-class.yaml, dán đoạn mã code bên dưới và lưu lại.  apiVersion: storage.k8s.io/v1\rkind: StorageClass\rmetadata: name: ebs-sc\rprovisioner: ebs.csi.aws.com\rvolumeBindingMode: WaitForFirstConsumer Tạo một tệp tên 02-pvc.yaml.  touch 02-pvc.yaml Mở tệp 02-pvc.yaml, dán đoạn mã code bên dưới và lưu lại.  apiVersion: v1\rkind: PersistentVolumeClaim\rmetadata:\rname: ebs-mysql-pv-claim\rspec: accessModes:\r- ReadWriteOnce\rstorageClassName: ebs-sc\rresources: requests:\rstorage: 4Gi Tạo một tệp tên 03-mysql-deployment.yaml.  touch 03-mysql-deployment.yaml Mở tệp 03-mysql-deployment.yaml, dán đoạn mã code bên dưới và lưu lại.  apiVersion: apps/v1\rkind: Deployment\rmetadata:\rname: mysql\rspec: replicas: 1\rselector:\rmatchLabels:\rapp: mysql\rstrategy:\rtype: Recreate template: metadata: labels: app: mysql\rspec: containers:\r- name: mysql\rimage: mysql:5.6\renv:\r- name: MYSQL_ROOT_PASSWORD\rvalue: 123Vodanhphai\rports:\r- containerPort: 3306\rname: mysql volumeMounts:\r- name: mysql-persistent-storage\rmountPath: /var/lib/mysql volumes: - name: mysql-persistent-storage\rpersistentVolumeClaim:\rclaimName: ebs-mysql-pv-claim Tạo một tệp tên 04-mysql-clusterip.yaml.  touch 04-mysql-clusterip.yaml Mở tệp 04-mysql-clusterip.yaml, dán đoạn mã code bên dưới và lưu lại.  apiVersion: v1\rkind: Service\rmetadata: name: mysql-svc\rspec:\rselector:\rapp: mysql ports: - port: 3306 clusterIP: None # This means we are going to use Pod IP Bây giờ, chúng ta sẽ thử triển khai MySQL Deployment để kiểm tra CSDL MySQL.  kubectl apply -f . 11. Liệt kê tất cả tài nguyên được tạo.\nkubectl get sc,pv,pvc,deploy,svc,pod Có rất nhiều tài nguyên được tạo:\n Một Storage Class tên ebs-sc. Một Persistent Volume (PV) với tên được tạo tự động, trạng thái là Bound và Capacity là 4Gi. Một Persistent Volume Claim (PVC) tên ebs-mysql-pv-claim, trạng thái là Bound và Capacity là 4Gi. Một Service Type ClusterIP tên mysql-svc với Port là 3306. Một Deployment tên mysql với READY là 1/1 (nghĩa là có 1 pod được tạo thành công với replicas là 1). Một Pod tên DeploymentName-xxxxxxx-xxxxx với STATUS là Running.  Bât giờ hãy sử dụng một Ephemeral Pod để kiểm tra kết nối tới CSDL MySQL.  kubectl run test-mysql-ephemeral-pod -it --rm --image=mysql:5.6 -- mysql -h mysql-svc -p123Vodanhphai Ephemeral Pod của bạn đã kết nối tới CSDL MySQL thành công. 13. Liệt kê mô hình của CSDL MySQL.\nshow schemas; Tạo CSDLfcjmgmt cho ứng dụng.  CREATE DATABASE fcjmgmt; Liệt kê mô hình của CSDL MySQL lại để thấy CSDL đã tạo fcjmgmt.  show schemas; Tạo một bảng tên user bên trong CSDL fcjmgmt.  use fcjmgmt;\rCREATE TABLE `user` ( `id` INT NOT NULL AUTO_INCREMENT , `first_name` VARCHAR(45) NOT NULL , `last_name` VARCHAR(45) NOT NULL , `email` VARCHAR(45) NOT NULL , `phone` VARCHAR(45) NOT NULL , `comments` TEXT NOT NULL , `status` VARCHAR(10) NOT NULL DEFAULT \u0026#39;active\u0026#39; , PRIMARY KEY (`id`)) ENGINE = InnoDB;\rshow tables;  Nhấn exit để thoát khỏi Ephemeral pod. Ephemeral Pod nãy sẽ bị xóa sau khi bạn thoát khỏi nó.   Đi đến EBS Volume để xác minh có một ổ đĩa được tạo với Capacity là 4Gi.\n  "
},
{
	"uri": "/vi/2-prerequiste/2.3-installation/",
	"title": "Cài đặt công cụ",
	"tags": [],
	"description": "",
	"content": "Trong bài thực hành này, chúng ta sẽ cài đặt các công cụ cần thiết: awscli, kubectl và eksctl.\nNâng cấp awscli  Sao chép và dán dòng lệnh dưới đây vào cửa sổ lệnh Cloud8 để nâng cấp awscli.  sudo pip install --upgrade awscli \u0026amp;\u0026amp; hash -r Cài đặt kubectl  Tại cửa sổ lệnh Cloud9, thực hiện câu lệnh này để cài đặt kubectl.   Nâng cấp các gói tin trong máy chủ.  sudo yum update  Cài đặt kubectl.  curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl Kiểm tra phiên bản của kubectl.  kubectl version --client Cài đặt eksctl  Tại cửa sổ lệnh Cloud9, thực hiện câu lệnh này để cài đặt eksctl.   Tải xuống và giải nén bản phát hành mới nhất của eksctl bằng lệnh sau.  curl --silent --location \u0026#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C /tmp  Di chuyển nhị phân được trích xuất sang /usr/local/bin.  sudo mv /tmp/eksctl /usr/local/bin  Kiểm thử việc cài đặt đã thành công bằng câu lệnh  eksctl version "
},
{
	"uri": "/vi/3-eksdbwithebs/",
	"title": "Triển khai CSDL trên Amazon EKS thông qua EBS Volume",
	"tags": [],
	"description": "",
	"content": "Overview We are going to use EBS CSI Driver and use EBS Volumes for persistence storage to MySQL Database\nContent  3.1 Cài đặt EBS CSI Driver 3.2 Triển khai CSDL MySQL trên EBS Volume 3.3 Triển khai ứng dụng  "
},
{
	"uri": "/vi/3-eksdbwithebs/3.3-deployappdeployment/",
	"title": "Triển khai ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bây giờ, chúng ta sẽ tạo các tệp manifest để triển khai ứng dụng và các dịch vụ của nó\nTriển khai ứng dụng  Tạo một tệp tên 05-fcjmgmt-deployment.yaml.  touch 05-fcjmgmt-deployment.yaml Mở tệp 05-fcjmgmt-deployment.yaml, dán đoạn mã code sau. Thay thế \u0026lt;YOUR-REPOSITORY-PATH:TAG\u0026gt; với tên Repository và tag của bạn. Trong trường hợp này là firstcloudjourneypcr/fcj-management:v1.  apiVersion: apps/v1\rkind: Deployment metadata:\rname: fcjmgmt-microservice\rlabels:\rapp: fcjmgmt-restapp\rspec:\rreplicas: 1\rselector:\rmatchLabels:\rapp: fcjmgmt-restapp\rtemplate: metadata:\rlabels: app: fcjmgmt-restapp\rspec:\rcontainers:\r- name: fcjmgmt-restapp\rimage: \u0026lt;YOUR-REPOSITORY-PATH:TAG\u0026gt;\rports: - containerPort: 8080 env:\r- name: DB_HOST\rvalue: \u0026#34;mysql-svc\u0026#34; - name: DB_PORT\rvalue: \u0026#34;3306\u0026#34; - name: DB_NAME\rvalue: \u0026#34;fcjmgmt\u0026#34; - name: DB_USER\rvalue: \u0026#34;admin\u0026#34; - name: DB_PASS\rvalue: \u0026#34;123Vodanhphai\u0026#34; - name: PORT\rvalue: \u0026#34;8080\u0026#34; 3. Tạo một tệp tên 06-fcjmgmt-svc.yaml.\ntouch 06-fcjmgmt-svc.yaml Mở tệp 06-fcjmgmt-svc.yaml, dán đoạn mã code bên dưới và lưu lại.  apiVersion: v1\rkind: Service\rmetadata:\rname: fcjmgmt-restapp-service\rlabels: app: fcjmgmt-restapp\rspec:\rtype: NodePort\rselector:\rapp: fcjmgmt-restapp\rports: - port: 8080\rtargetPort: 8080\rnodePort: 31231 Hãy triển khai ứng dụng của bạn.  kubectl apply -f . Liệt kê tất cả tài nguyên đã tạo.  kubectl get sc,pv,pvc,deploy,svc,pod Có một Service mới được tạo tên fcjmgmt-restapp-service với TYPE là NodePort và PORT là 8080:31231/TCP, một Deployment mới được tạo tên fcjmgmt-microservice và Pod với STATUS là Running.\nLấy Public IP Address của Node nơi Pod đang chạy.  kubectl get node -o wide Public IP Address là EXTERNAL-IP.\nTruy cập đến ứng dụng URL để kiểm tra kết quả http://\u0026lt;EXTERNAL-IP\u0026gt;:31231.  Ứng dụng của bạn hiện chưa thể truy cập được. Điều này bởi vì Security Group của Node nơi Pod đang chạy vẫn chưa mở cổng 31231.\nĐi đến Security Group/ Nhấn vào Security Group tìm kiếm được.   Nhấn Edit inbound rules.   Thêm một quy tắc mới:\n Type là Custom TCP. Port range là 31231. Source là Anywhere-IPv4.    Nhấn Save rules.   Truy cập lại URL của ứng dụng để kiểm tra kết quả.   Ứng dụng của bạn đã được triển khai thành công.\nKiểm thử ứng dụng   Nhấn Add New User.   Nhập tất cả thông tin và nhấn Submit.\n   Nhập lại bước trên để thêm nhiều User hơn.\n  Sau đó, nhấn Home để trở về trang chủ.\n  Kiểm tra kết quả, có nhiều User đã được thêm vào ứng dụng của bạn.   Bây giờ chúng ta sẽ xóa Pod ứng dụng và tạo một cái mới để kiểm tra xem dữ liệu đã nhập có được giữ hay không? 6. Tại cửa sổ lệnh Cloud9, xóa Pod ứng dụng.\nkubectl delete -f 05-fcjmgmt-deployment.yaml Liệt kê lại tất cả tài nguyên để đảm bảo rằng Pod ứng dụng và Deployment đã được xóa.  kubectl get pod,deployment Chúng đã bị xóa hoàn toàn.\nHãy tạo lại chúng.  kubectl apply -f 05-fcjmgmt-deployment.yaml Liệt kê lại tất cả tài nguyên để đảm bảo rằng chúng đã được tạo.  kubectl get pod,deployment Truy cập lại vào URL của ứng dụng để kiểm tra kết quả.   Tất cả dữ liệu vẫn được giữ trong khi Pod và Deployment bị thay thế.\nDọn dẹp  Tại cửa sổ lệnh Cloud9, thực thi câu lệnh bên dưới để xóa tất cả tài nguyên đã tạo.  kubectl delete -f . Liệt kê tất cả tài nguyên lại để đảm bảo rằng chúng đã được xóa hoàn toàn.  kubectl get sc,pv,pvc,deploy,svc,pod Tất cả đã được xóa hoàn toàn\nĐi đến EBS Volume để xác minh EBS Volume đã được xóa.  "
},
{
	"uri": "/vi/2-prerequiste/2.4-createekscluster/",
	"title": "Tạo Amazon EKS Cluster",
	"tags": [],
	"description": "",
	"content": "Ở bước trước đó, chúng ta đã cài đặt các công cụ cần thiết: awscli, kubectl và eksctl. Bây giờ chúng ta sẽ tạo một Amazon EKS Cluster với managed Node Group là EC2 Instance.\nTạo Amazon EKS Cluster.  Tại cửa sổ lệnh Cloud9, thực hiện câu lệnh này để tạo một Amazon EKS Cluster.  eksctl create cluster --name=fcj-db-cluster --region=ap-southeast-1 --zones=ap-southeast-1a,ap-southeast-1b --without-nodegroup Sau đó, kiểm tra Cluster bằng câu lệnh.  eksctl get cluster --region=ap-southeast-1 Cho phép kubectl giao tiếp với cluster của bạn bằng việc thêm chuỗi này vào tệp kubectl config.  aws eks update-kubeconfig --region=ap-southeast-1 --name=fcj-db-cluster Sau đó, xác nhận giao tiếp với cluster của bạn bằng câu lệnh.  kubectl get svc Chú ý: Kết quả mong đợi là sự xuất hiện của dịch vụ ClusterIP\nTạo và liên kết IAM OIDC Provider cho EKS Cluster. IAM OpenID Connect (OIDC) Provider giúp sử dụng một số tiện ích của Amazon EKS, hoặc cho phép khối lượng công việc riêng lẻ Kubernetes có các quyền AWS Identity and Access Management (IAM) cụ thể.\n Tại cửa sổ lệnh Cloud9, thực hiện câu lệnh này để tạo và liên kết một OIDC Provider tới Amazon EKS Cluster.  eksctl utils associate-iam-oidc-provider --cluster=fcj-db-cluster --region=ap-southeast-1 --approve Để xác nhận OIDC Provider đã tạo, đi đến IAM. Chuyển đến mục Identity providers. Bạn sẽ thấy có một Provider được tạo  Tạo Amazon EKS managed Node Group.  Tại cửa sổ lệnh Cloud9, thực hiện câu lệnh này để tạo managed Node Group và liên kết nó tới EKS Cluster.  eksctl create nodegroup --name=fcj-db-nodegroup --cluster=fcj-db-cluster --region=ap-southeast-1 --node-type=t3.medium --nodes=1  Sẽ mất khoảng 15 phút để hoàn thành quy trình này.   Liệt kê tất cả các node trong cluster.\n  kubectl get nodes "
},
{
	"uri": "/vi/2-prerequiste/2.5-createapplication/",
	"title": "Tạo ứng dụng",
	"tags": [],
	"description": "",
	"content": "Trong chương này, chúng ta sẽ tải xuống một ứng dụng mẫu FCJ Management.\nTải xuống ứng dụng.  Kiểm tra phiên bản của Git.  git version Nâng cấp Git lên phiên bản mới nhất.  sudo yum update git Tạo và di chuyển đến thư mục làm việc.  mkdir fcj-user-management\rcd fcj-user-management Tải xuống ứng dụng.  git clone https://github.com/First-Cloud-Journey/000004-EC2.git Liệt kê tất cả tài nguyên của ứng dụng.  ls\rls 000004-EC2 Đổi tên thư mục 000004-EC2 thành Application.  mv 000004-EC2 Application Liệt kê lại tất cả tài nguyên của ứng dụng.  ls\rls Application 8. Di chuyển đến thư mục ứng dụng và cài đặt các gói phụ thuộc của ứng dụng trên package.json.\ncd Application\rnpm install 9. Khởi chạy ứng dụng.\nnode app.js Ứng dụng sẽ trả về lỗi Fail to connect to database, bởi vì chưa có CSDL MySQL được tạo và cung cấp cho ứng dụng để sử dụng.\nBây giờ chúng ta sẽ đóng gói ứng dụng thành Container Image bằng Docker. CSDL MySQL sẽ được cung cấp ở các phần tiếp theo.\nĐóng gói ứng dụng  Kiểm tra phiên bản của Docker.  docker version Tạo tệp Dockerfile.  touch Dockerfile Mở tệp Dockerfile, dán đoạn mã code bên dưới và lưu lại.  # Use an official Node.js runtime as a parent image FROM node:13-alpine # Set the working directory in the container WORKDIR app # Copy package.json and package-lock.json to the working directory COPY package*.json ./ # Install dependencies RUN npm install # Copy the rest of the application code COPY . . # Expose the port the app runs on EXPOSE 5000 # Command to run the application CMD [\u0026#34;npm\u0026#34;,\u0026#34;start\u0026#34;] Tạo tệp .dockerignore để làm giảm dung lượng cho Container Image.  touch .dockerignore  Nhấn vào biểu tượng Settings, chọn Show Hidden Files để nhìn thấy tệp ẩn .dockerignore.   Mở tệp .dockerignore, dán đoạn mã code bên dưới và lưu lại.\n  .git\rnode_modules\rDockerfile Liệt kê tất cả Image trong máy chủ. Đảm bảo rằng không có Image nào tên fcj-management bởi vì chúng ta sẽ dùng tên này để đặt cho Container Image.  docker images Xây dựng ứng dụng thành Container Image.  docker build -t fcj-management:v1 . Sau khi quy trình này hoàn tất. Hãy liệt kê lại tất cả Image trong máy chủ làm việc.  docker images Container Image tên fcj-management với nhãn v1 được tạo thành công từ ứng dụng FCJ Management. Bây giờ hãy sử dụng Docker để triển khai ứng dụng từ Container Image vừa tạo cho mục đích kiểm thử.\nThực thi câu lệnh bên dưới để triển khai ứng dụng từ Container Image vừa tạo.  docker run -d --name testing-application -e PORT=8080 -p 8080:8080 fcj-management:v1 Liệt kê các process đang chạy bên trong máy chủ làm việc.  docker ps Kiểm tra Log của ứng dụng.  docker logs testing-application Lỗi xuất hiện trên log cũng là Fail to connect to database. Có nghĩa Container Image đã được xây dụng thành công.\nHãy xóa tất cả Process đang chạy.  docker stop testing-application\rdocker rm testing-application\rdocker ps -a Đẩy Container Image lên DockerHub Trong bước này, chúng ta sẽ đẩy Container Image vừa tạo lên DockerHub cho Amazon EKS Cluster có thể kéo về để chạy Pod. Vì thế chúng ta sẽ không đào sâu vào việc làm thế nào để sử dụng DockerHub, chi tiết truy cập DockerHub Docs.\n  Đăng nhập vào DockerHub với tài khoản của bạn.\n  Tạo một Repository tên fcj-management.   Đi đến DockerHub Security để tạo Access Token mới cho máy chủ làm việc Cloud9 đăng nhập.\n  Nhấn New Access Token.   Nhập tại Access Token Description là Access Token for FCJ Workshop.\n  Giữ mặc định Access Permissions (với quyền Read, Write, Delete).\n  Sau đó, nhấn Generate.   Lưu mã Access Token lại để sử dụng sau.   Trở lại cửa sổ lệnh Cloud9, đăng nhập vào DockerHub.\n  docker login -u firstcloudjourneypcr Nhập Access Token nếu bị hỏi Password.   Để đẩy Container Image lên DockerHub repository. Repository của Container Image phải khớp với tên Repository trên DockerHub.\nĐể làm điều đó, chúng ta sẽ gắn nhãn cho Container Image.  docker tag fcj-management:v1 firstcloudjourneypcr/fcj-management:v1 Liệt kê tất cả Image trong máy chủ làm việc.  docker images Cho một Image mới được chép lại với Repository tên là firstcloudjourneypcr/fcj-management, nhãn và v1. 13. Bây giờ, hãy đẩy Container Image lên DockerHub.\ndocker push firstcloudjourneypcr/fcj-management:v1 Đi đến DockerHub Repository firstcloudjourneypcr/fcj-management để kiểm tra.  Có một Image mới vừa được đẩy lên DockerHub Repository với tag là v1.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]